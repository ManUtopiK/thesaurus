.meta {
	.title{The programmer's thesaurus}
}

.chapter[Introduction] {
	.p {
		In computer-related areas, the English language offers a broad
		vocabulary. Therefore, naming functions and methods can be a
		difficult task. This document aims to be a comprehensive
		reference which will help you finding the most appropriate word
		in all situations.
	}

	.p {
		If you want to contribute, I'd be happy to include your changes.
		You can find my e-mail address at the bottom of this document.
		Alternatively, you can fork it on
		.url[http://github.com/tindzk/thesaurus]{GitHub} and then send a
		pull request.
	}
}

.chapter[Variable, Property and Attribute names] {
	.section[Object-Orientation] {
		.list {
			.item{action}
			.item{arg, argument}
			.item{attr, attribute}
			.item{class}
			.item{context}
			.item{dependency}
			.item{hidden}
			.item{ident, identifier}
			.item{inheritance}
			.item{inst, instance}
			.item{itf, interface}
			.item{memb, member}
			.item{meth, method}
			.item{mod, module}
			.item{obj, object}
			.item{param, parameter}
			.item{priv, private}
			.item{prop, property}
			.item{protected}
			.item{public}
			.item{published}
			.item{res, resource}
			.item{routine}
			.item{self}
			.item{shared}
			.item{this}
			.item{var, variable}
		}
	}

	.section[States] {
		.list {
			.item{mutable}
			.item{transient}
			.item{volatile}
		}
	}

	.section[Loops, Lists and Arrays] {
		.list {
			.item{bucket}
			.item{el, elem, element}
			.item{i, idx, index}
			.item{it, item}
			.item{it, iter, iterator}
			.item{slot}
		}
	}

	.section[Tables] {
		.list {
			.item{col, column}
			.item{row}
		}
	}

	.section[Date/Time] {
		.list {
			.item{d, day}
			.item{date}
			.item{h, hour}
			.item{hrs, hours}
			.item{m, min, minute}
			.item{m, month}
			.item{mins, minutes}
			.item{time}
			.item{y, year}
		}
	}

	.section[Processes] {
		.list {
			.item{pid, processId}
			.item{proc, process}
		}
	}

	.section[Search] {
		.list {
			.item{needle}
			.item{haystack}
			.item{off, ofs, offset}
			.item{pos, position}
			.item{occurrence}
		}
	}

	.section[Trees] {
		.list {
			.item{child}
			.item{node}
			.item{parent}
			.item{path}
		}
	}

	.section[Graphical User Interfaces] {
		.list {
			.item{box}
			.item{dialog}
			.item{entry}
			.item{opt, option}
			.item{widget}
		}
	}

	.section[Tasks and Operations] {
		.list {
			.item{action}
			.item{batch}
			.item{bulk}
			.item{job}
			.item{mass}
			.item{op, operation}
			.item{proc, process}
			.item{progress}
			.item{routine}
			.item{task}
		}
	}

	.section[Entities] {
		.list {
			.item{block}
			.item{bundle}
			.item{context}
			.item{entity}
			.item{group}
			.item{session}
			.item{transaction}
		}
	}

	.section[Event handling] {
		.list {
			.item{cb, callback}
			.item{context}
			.item{hook}
			.item{sender}
			.item{sig, signal}
			.item{subscr, subscriber}
		}
	}

	.section[Memory and Garbage Collection] {
		.list {
			.item{addr, address}
			.item{allocator}
			.item{arena}
			.item{buf, buffer}
			.item{capacity}
			.item{chunk}
			.item{context}
			.item{mem, memory}
			.item{pool}
			.item{ptr, pointer}
			.item{refcnt, reference count}
			.item{segment}
			.item{size}
		}
	}

	.section[Networking] {
		.list {
			.item{chunk}
			.item{conn, connection}
			.item{host}
			.item{ip}
			.item{packet}
			.item{payload}
			.item{socket}
		}
	}

	.section[Web development] {
		.list {
			.item{cookie}
			.item{sess, session}
		}
	}

	.section[User Interfaces] {
		.list {
			.item{caption}
			.item{descr, description}
			.item{headline}
			.item{name}
			.item{pg, page}
			.item{title}
		}
	}

	.section[File] {
		.list {
			.item{directory}
			.item{eof, endOfFile}
			.item{file}
			.item{io}
			.item{path}
		}
	}

	.section[Data types/structures] {
		.list {
			.item{buf, buffer}
			.item{ptr, pointer}
			.item{str, string}
		}
	}

	.section[Links] {
		.list {
			.item{prev, next}
		}
	}

	.section[Debugging and Error handling] {
		.list {
			.item{bug}
			.item{crash}
			.item{err, error, errno}
			.item{exc, exception}
			.item{failure}
			.item{fix}
			.item{prio, priority}
			.item{st, status}
			.item{tc, test case}
			.item{tb, test bundle}
			.item{ts, test suite}
		}
	}

	.section[Messaging] {
		.list {
			.item{msg, message}
			.item{req, request}
			.item{resp, response}
		}
	}

	.section[Return values] {
		.list {
			.item{out, output}
			.item{res, result}
		}
	}

	.section[Lines] {
		.list {
			.item{eol, endOfLine}
			.item{bol, beginningOfLine}
		}
	}

	.section[Positions and lengths] {
		.list {
			.item{capacity}
			.item{cnt, count}
			.item{len, length}
			.item{off, offset}
			.item{pos, position}
			.item{size}
		}
	}

	.section[Database] {
		.list {
			.item{cur, current}
			.item{cur, cursor}
			.item{db, database}
			.item{qry, query}
			.item{record}
			.item{snapshot}
		}
	}

	.section[Time] {
		.list {
			.item{sec, s}
			.item{msec}
			.item{usec}
			.item{time}
			.item{diff, difference}
			.item{tz, timezone}
		}
	}

	.section[Characters and Strings] {
		.list {
			.item{buf, buffer}
			.item{c, ch: character}
			.item{cstr: C string}
			.item{len, length}
			.item{s, str: string}
			.item{sz: zero-terminated string}
		}
	}

	.section[General] {
		.list {
			.item{env, environment}
			.item{val, value}
		}
	}
}

.chapter[Function names] {
	.section[Object-Orientation] {
		.list {
			.item{depend}
			.item{inherit}
		}
	}

	.section[Event handling] {
		.list {
			.item{attach}
			.item{bind}
			.item{call}
			.item{conn, connect}
			.item{detach}
			.item{disconn, disconnect}
			.item{emit}
			.item{invoke}
			.item{notify}
			.item{observe}
			.item{pass}
			.item{register}
			.item{restore}
			.item{subscribe}
			.item{trigger}
			.item{unregister}
			.item{unsubscribe}
		}
	}

	.section[Database] {
		.list {
			.item{commit}
			.item{conn, connect}
			.item{disconn, disconnect}
			.item{populate}
			.item{qry, query}
		}
	}

	.section[ACL] {
		.list {
			.item{grant}
			.item{deny}
		}
	}

	.section[Test suites] {
		.list {
			.item{assert}
			.item{expect}
		}
	}

	.section[Serializing] {
		.list {
			.item{bundle}
			.item{escape}
			.item{obfuscate}
			.item{sanitize}
			.item{serialize}
			.item{wrap, unwrap}
		}
	}

	.section[Resizing] {
		.list {
			.item{enlarge}
			.item{extend}
			.item{grow}
			.item{resize}
		}
	}

	.section[Compression] {
		.list {
			.item{compress}
			.item{minimize}
			.item{shorten}
			.item{shrink}
		}
	}

	.section[Math] {
		.list {
			.item{rd, round}
			.item{rnd, random, randomize}
		}
	}

	.section[Strings] {
		.list {
			.item{bind}
			.item{concat, concatenate}
			.item{format}
			.item{insert}
			.item{resize}
			.item{trim}
		}
	}

	.section[Loops, Lists and Arrays] {
		.list {
			.item{add}
			.item{bwd, backward}
			.item{each, foreach}
			.item{enum, enumerate}
			.item{find}
			.item{fwd, forward}
			.item{iter, iterate}
			.item{list}
			.item{lookup}
			.item{pop}
			.item{push}
			.item{remove}
			.item{rev, reverse}
			.item{rpt, repeat}
			.item{rwd, rewind}
		}
	}

	.section[Trees] {
		.list {
			.item{appendChild}
			.item{collapse}
			.item{createElement}
			.item{expand}
			.item{getChildren}
			.item{hasChildren}
			.item{setAttribute}
		}
	}

	.section[Templates] {
		.list {
			.item{assign}
			.item{display}
			.item{render}
		}
	}

	.section[Memory and Garbage Collection] {
		.list {
			.item{alloc, allocate}
			.item{dispose}
			.item{free}
			.item{invalidate}
			.item{link}
			.item{new}
			.item{ref, reference}
			.item{relate}
			.item{release}
			.item{retain}
			.item{steal}
			.item{unlink}
			.item{unref, unreference}
		}
	}

	.section[Networking] {
		.list {
			.item{accept}
			.item{addHandler, e.g. addEventHandler}
			.item{bind}
			.item{download}
			.item{handshake}
			.item{listen}
			.item{read}
			.item{recv, receive}
			.item{send, e.g. sendAuthRequest}
			.item{upload}
			.item{write}
		}
	}

	.section[Encoding] {
		.list {
			.item{decode}
			.item{decrypt}
			.item{encode}
			.item{encrypt}
			.item{mangle}
		}
	}

	.section[Graphical User Interfaces] {
		.list {
			.item{activate}
			.item{draw}
			.item{hide}
			.item{paint}
			.item{update}
		}
	}

	.section[Tasks and Operations] {
		.list {
			.item{continue}
			.item{handle}
			.item{hold}
			.item{invoke}
			.item{launch}
			.item{proceed}
			.item{process}
			.item{redo}
			.item{request}
			.item{reset}
			.item{respond}
			.item{restart}
			.item{resume}
			.item{run}
			.item{start}
			.item{stop}
			.item{suspend}
			.item{undo}
		}
	}

	.section[Processes] {
		.list {
			.item{exec, execute}
			.item{kill}
			.item{launch}
			.item{restart}
		}
	}

	.section[Receiving] {
		.list {
			.item{fetch}
			.item{get, e.g getName, getById}
			.item{grab}
			.item{obtain}
			.item{read}
			.item{recv, receive}
			.item{request}
			.item{retr, retrieve}
		}
	}

	.section[Transmission] {
		.list {
			.item{deliver}
			.item{send}
			.item{transfer}
			.item{transmit}
		}
	}

	.section[Clusters and Collections] {
		.list {
			.item{accumulate}
			.item{aggregate}
			.item{collect}
		}
	}

	.section[Iterating] {
		.list {
			.item{each, foreach}
			.item{getIter, getIterator}
			.item{iter, iterate}
			.item{key}
			.item{list}
			.item{map}
			.item{next}
			.item{prev}
			.item{reduce}
			.item{valid}
			.item{value}
			.item{walk}
		}
	}

	.section[Checking] {
		.list {
			.item{can}
			.item{has}
			.item{is}
		}
	}

	.section[Comparing] {
		.list {
			.item{cmp, compare}
			.item{contains}
			.item{diff}
			.item{eq, equals, isEqual}
			.item{matches}
		}
	}

	.section[Streams] {
		.list {
			.item{rewind}
			.item{tell}
			.item{peek}
		}
	}

	.section[File] {
		.list {
			.item{append}
			.item{lock}
			.item{open}
			.item{read}
			.item{unlock}
			.item{write}
		}
	}

	.section[Construction] {
		.list {
			.item{alloc, allocate}
			.item{bootstrap}
			.item{build}
			.item{constr, construct}
			.item{create}
			.item{ctor, constructor}
			.item{decl, declare}
			.item{init, initialize}
			.item{install}
			.item{load, e.g. loadFile}
			.item{make}
			.item{new}
		}
	}

	.section[Destruction] {
		.list {
			.item{cleanup}
			.item{clean}
			.item{clear}
			.item{close}
			.item{del, delete}
			.item{destroy}
			.item{destruct}
			.item{dispose}
			.item{drop}
			.item{dtor, destructor}
			.item{erase}
			.item{exit}
			.item{finalize}
			.item{free}
			.item{invalidate}
			.item{kill}
			.item{purge}
			.item{release}
			.item{rem, remove}
			.item{term, terminate}
			.item{uninstall}
			.item{unlink}
			.item{wipe}
		}
	}

	.section[Updating] {
		.list {
			.item{upd, update}
			.item{upgr, upgrade}
			.item{refr, refresh}
			.item{touch (updates timestamp to match current time)}
		}
	}

	.section[Merging] {
		.list {
			.item{apply}
			.item{combine}
			.item{concat, concatenate}
			.item{join}
			.item{merge}
		}
	}

	.section[Duplication] {
		.list {
			.item{cpy, copy}
			.item{clone}
			.item{dup, duplicate}
		}
	}

	.section[Assigning] {
		.list {
			.item{assign}
			.item{set}
		}
	}

	.section[Output] {
		.list {
			.item{pr, print}
			.item{echo}
			.item{write}
			.item{disp, display}
		}
	}

	.section[Search] {
		.list {
			.item{extract}
			.item{filter}
			.item{find, e.g. findRoute, rfind, reverseFind}
			.item{lookup}
			.item{match}
			.item{read}
			.item{scan}
			.item{search}
			.item{seek}
		}
	}

	.section[Error handling] {
		.list {
			.item{assert}
			.item{catch}
			.item{debug}
			.item{except}
			.item{expect}
			.item{getCode}
			.item{getFile}
			.item{getLine}
			.item{getMessage}
			.item{getTrace}
			.item{pass}
			.item{raise}
			.item{throw}
			.item{try}
		}
	}

	.section[Storage] {
		.list {
			.item{read}
			.item{save}
			.item{store}
		}
	}
}

.chapter[Class names] {
	.list {
		.item{Abstract, e.g. AbstractManufacturer}
		.item{Batch}
		.item{Behavior}
		.item{ConcreteFilter}
		.item{Debugger}
		.item{Decorator}
		.item{Facade, e.g. PurchasingFacade}
		.item{Facade}
		.item{Factory}
		.item{Figure}
		.item{Filter}
		.item{FrontController: addPreFilter, addPostFilter, handleRequest}
		.item{Handler, e.g. RequestHandler}
		.item{Implementation}
		.item{Instance}
		.item{Interface}
		.item{Listener}
		.item{Manager}
		.item{Middleware}
		.item{Operation}
		.item{Processor}
		.item{Provider}
		.item{Proxy}
		.item{Registry}
		.item{Reporter}
		.item{Service}
		.item{Singleton}
		.item{Storage}
		.item{Utils}
	}

	.section[Events] {
		.list {
			.item{EventDispatcher}
			.item{Observer}
		}
	}

	.section[Collections] {
		.list {
			.item{Chain, e.g. FilterChain}
			.item{Cluster}
			.item{Collection}
			.item{Container}
			.item{Repository}
			.item{Suite}
		}
	}

	.section[Components] {
		.list {
			.item{Component}
			.item{Kit}
			.item{Module}
			.item{Package}
		}
	}

	.section[Interface names] {
		.list {
			.item{Iterator: current, key, next, rewind, valid}
			.item{IteratorAggregate}
			.item{Observable: attach, detach, notify}
			.item{Processor}
			.item{Serializable}
		}
	}
}

.chapter[Example: Car rental company] {
	.section[Classes] {
		.list {
			.item{Vehicle}
			.item{Customer}
			.item{RentalAction}
		}
	}

	.section[Methods] {
		.list {
			.item{isReturned}
			.item{isVehicleAvailable}
			.item{rentVehicle}
			.item{sellVehicle}
			.item{returnVehicle}
			.item{startEngine}
			.item{stopEngine}
		}
	}

	.section[Variables] {
		.list {
			.item{returnDate}
			.item{markVehicleReturned}
			.item{rentalActions}
		}
	}

	.section[Exceptions] {
		.list {
			.item{VehicleNotAvailableException}
			.item{MileageLimitExceededException}
		}
	}
}

.chapter[States] {
	.list {
		.item{connecting}
		.item{idling}
		.item{initialising}
		.item{lingering}
		.item{pending}
		.item{processing}
		.item{reading}
		.item{waiting}
		.item{writing}
	}
}

.chapter[Roles] {
	.list {
		.item{Administrator}
		.item{Author}
		.item{Collaborator}
		.item{Contributor}
		.item{Editor}
		.item{Guest}
		.item{Manager}
		.item{Member}
		.item{Moderator}
		.item{Publisher}
		.item{Subscriber}
		.item{User}
		.item{Viewer}
	}
}

.chapter[VCS commit messages] {
	This chapter introduces some rules for commit messages and
	provides you with a few sample sentences which you can use in
	your own commits.

	.section[Rules] {
		.p {
			First of all, it's advisable to generally use the present tense
			in the header in which you only give an abstract description of
			your changes. For consistency, terminate all header messages
			with a point. An exception is non-linguistic contents such as
			commands, e.g. .keyword{s/needle/replace/}
		}

		.p {
			In the body you should go into detail. If appropriate,
			may also want to give some background information.
			Unlike the header, it's valid to use the past tense in
			the body.
		}

		As for object-oriented projects, the general structure of
		the header is:

		.p {
			.i{Module}: Message
		}

		When a commit affects multiple modules, you can enumerate them:

		.p {
			.i{Module1, Module2}: Message
		}

		Alternatively, the enumeration may be omitted if there are too
		many.
	}

	.section[Deletion] {
		.list {
			.item{Delete .i{X}.}
			.item{Get rid of .i{X}.}
			.item{Drop .i{X}. (e.g. .i{Drop support for X.})}
		}
	}

	.section[Bug fixing] {
		.list {
			.item{Fix .i{X}.}
			.item{Fix bug.}
			.item{Spotted with .i{X}. (e.g. Valgrind) .b{This should go into the description.}}
		}
	}

	.section[Replacing components] {
		.list {
			.item{Make use of .i{X}.}
			.item{Merge .i{X} and .i{Y}.}
			.item{Use .i{X} in favour of .i{Y}.}
			.item{Use .i{X} instead of .i{Y}.}
		}
	}

	.section[General changes] {
		.list {
			.item{Change .i{X}.}
			.item{Cosmetic changes.}
			.item{Enhance .i{X}.}
			.item{Facilitate .i{X}.}
			.item{Improve .i{X}.}
			.item{Restore .i{X}. (e.g. .i{Restore old behaviour.})}
			.item{Revert .i{X}.}
			.item{Revise .i{X}.}
			.item{Rework .i{X}.}
			.item{Synchronize with upstream changes.}
			.item{Trivial change(s).}
		}
	}
}

.chapter[Logging levels] {
	Sorted by severity.

	.list {
		.item{Trace}
		.item{Debug}
		.item{Informational}
		.item{Warning}
		.item{Error}
		.item{Critical}
		.item{Fatal}
	}
}

.chapter[Abbreviations] {
	Each language has a certain number of words which appears to be
	specific to it. This chapter collects unique technical
	vocabulary grouped by the language it primarily occurs in. The
	purpose is to help you discovering interesting concepts and to give
	you some inspiration for making up your own ingenious class,
	variable and function names.

	.section[PHP] {
		.list {
			.item{__autoload}
			.item{__construct}
			.item{__unset}
			.item{trim}
			.item{implode}
			.item{explode}
			.item{needle}
			.item{haystack}
		}
	}

	.section[C] {
		.list {
			.item{strcmp, sometimes: streq}
			.item{argv, argc}
			.item{strlen}
			.item{strcpy}
			.item{strdup}
		}
	}

	.section[C++] {
		.list {
			.item{ctor}
			.item{dtor}
			.item{cstr}
		}
	}

	.section[Python] {
		.list {
			.item{__init__}
			.item{__new__}
		}
	}

	.section[Haskell] {
		.list {
			.item{newtype}
		}
	}

	.section[Lua] {
		.list {
			.item{pairs, ipairs}
			.item{tonumber}
		}
	}

	.section[Ruby] {
		.list {
			.item{puts}
			.item{upcase}
			.item{times}
		}
	}

	.section[Java] {
		.list {
			.item{bean}
			.item{servlet}
			.item{datasource}
		}
	}
}

.chapter[Appendix] {
	.section[Credits] {
		Most OO-related terms were taken from  the book "PHP Design Patterns" by
		Stephan Schmidt.  Contributions were received from:

		.list {
			.item{Zachary Halbrecht}
		}
	}

	.section[License] {
		Licensed under the EUPL,  Version 1.1 only (the .i{"Licence"});  You may
		not use this work except in compliance with the Licence.
	}

	.section[See also] {
		.list {
			.item{.url[http://flattr.com/thing/79136/The-programmers-thesaurus]{Donate}}
			.item{.url[http://github.com/tindzk/thesaurus/blob/master/thesaurus.tyo]{View source}}
			.item{.url[http://github.com/tindzk/thesaurus/issues]{Issue tracker}}
			.item{.url[http://tindzk.github.com/]{Other projects}}
			.item{.mail[tim.nieradzik@gmx.de]{Contact}}
		}
	}
}
